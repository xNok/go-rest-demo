// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Ingredient defines model for Ingredient.
type Ingredient struct {
	Name *string `json:"name,omitempty"`
}

// Recipe defines model for Recipe.
type Recipe struct {
	Ingredients *[]Ingredient `json:"ingredients,omitempty"`
	Name        *string       `json:"name,omitempty"`
}

// PostRecipesJSONRequestBody defines body for PostRecipes for application/json ContentType.
type PostRecipesJSONRequestBody = Recipe

// PutRecipesIdJSONRequestBody defines body for PutRecipesId for application/json ContentType.
type PutRecipesIdJSONRequestBody = Recipe

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRecipes request
	GetRecipes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRecipesWithBody request with any body
	PostRecipesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRecipes(ctx context.Context, body PostRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecipesId request
	DeleteRecipesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipesId request
	GetRecipesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRecipesIdWithBody request with any body
	PutRecipesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRecipesId(ctx context.Context, id string, body PutRecipesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRecipes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipes(ctx context.Context, body PostRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecipesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecipesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipesId(ctx context.Context, id string, body PutRecipesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRecipesRequest generates requests for GetRecipes
func NewGetRecipesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRecipesRequest calls the generic PostRecipes builder with application/json body
func NewPostRecipesRequest(server string, body PostRecipesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRecipesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRecipesRequestWithBody generates requests for PostRecipes with any type of body
func NewPostRecipesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRecipesIdRequest generates requests for DeleteRecipesId
func NewDeleteRecipesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipesIdRequest generates requests for GetRecipesId
func NewGetRecipesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRecipesIdRequest calls the generic PutRecipesId builder with application/json body
func NewPutRecipesIdRequest(server string, id string, body PutRecipesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRecipesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutRecipesIdRequestWithBody generates requests for PutRecipesId with any type of body
func NewPutRecipesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRecipesWithResponse request
	GetRecipesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRecipesResponse, error)

	// PostRecipesWithBodyWithResponse request with any body
	PostRecipesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipesResponse, error)

	PostRecipesWithResponse(ctx context.Context, body PostRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipesResponse, error)

	// DeleteRecipesIdWithResponse request
	DeleteRecipesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRecipesIdResponse, error)

	// GetRecipesIdWithResponse request
	GetRecipesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRecipesIdResponse, error)

	// PutRecipesIdWithBodyWithResponse request with any body
	PutRecipesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipesIdResponse, error)

	PutRecipesIdWithResponse(ctx context.Context, id string, body PutRecipesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipesIdResponse, error)
}

type GetRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]Recipe
}

// Status returns HTTPResponse.Status
func (r GetRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Recipe
}

// Status returns HTTPResponse.Status
func (r PostRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecipesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecipesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecipesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Recipe
}

// Status returns HTTPResponse.Status
func (r GetRecipesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRecipesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRecipesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRecipesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRecipesWithResponse request returning *GetRecipesResponse
func (c *ClientWithResponses) GetRecipesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRecipesResponse, error) {
	rsp, err := c.GetRecipes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipesResponse(rsp)
}

// PostRecipesWithBodyWithResponse request with arbitrary body returning *PostRecipesResponse
func (c *ClientWithResponses) PostRecipesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipesResponse, error) {
	rsp, err := c.PostRecipesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipesResponse(rsp)
}

func (c *ClientWithResponses) PostRecipesWithResponse(ctx context.Context, body PostRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipesResponse, error) {
	rsp, err := c.PostRecipes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipesResponse(rsp)
}

// DeleteRecipesIdWithResponse request returning *DeleteRecipesIdResponse
func (c *ClientWithResponses) DeleteRecipesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteRecipesIdResponse, error) {
	rsp, err := c.DeleteRecipesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecipesIdResponse(rsp)
}

// GetRecipesIdWithResponse request returning *GetRecipesIdResponse
func (c *ClientWithResponses) GetRecipesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetRecipesIdResponse, error) {
	rsp, err := c.GetRecipesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipesIdResponse(rsp)
}

// PutRecipesIdWithBodyWithResponse request with arbitrary body returning *PutRecipesIdResponse
func (c *ClientWithResponses) PutRecipesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipesIdResponse, error) {
	rsp, err := c.PutRecipesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipesIdResponse(rsp)
}

func (c *ClientWithResponses) PutRecipesIdWithResponse(ctx context.Context, id string, body PutRecipesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipesIdResponse, error) {
	rsp, err := c.PutRecipesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipesIdResponse(rsp)
}

// ParseGetRecipesResponse parses an HTTP response from a GetRecipesWithResponse call
func ParseGetRecipesResponse(rsp *http.Response) (*GetRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRecipesResponse parses an HTTP response from a PostRecipesWithResponse call
func ParsePostRecipesResponse(rsp *http.Response) (*PostRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRecipesIdResponse parses an HTTP response from a DeleteRecipesIdWithResponse call
func ParseDeleteRecipesIdResponse(rsp *http.Response) (*DeleteRecipesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecipesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecipesIdResponse parses an HTTP response from a GetRecipesIdWithResponse call
func ParseGetRecipesIdResponse(rsp *http.Response) (*GetRecipesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRecipesIdResponse parses an HTTP response from a PutRecipesIdWithResponse call
func ParsePutRecipesIdResponse(rsp *http.Response) (*PutRecipesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRecipesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
